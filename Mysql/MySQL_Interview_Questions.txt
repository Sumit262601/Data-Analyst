Key Concepts for Data Analysts:

Basic Query Structure

    SELECT, FROM, WHERE, GROUP BY, HAVING, ORDER BY, LIMIT
    Essential for data extraction and basic analysis
JOINS

    Understanding table relationships
    Combining data from multiple sources
Aggregate Functions

    COUNT, SUM, AVG, MAX, MIN
    Essential for summarizing data
Date/Time Analysis

    Date functions for time-series analysis
    Period-over-period comparisons
Window Functions

    For advanced calculations
    Running totals, rankings, moving averages
Data Transformations

    CASE statements
    String functions
    Type conversions
Common Analysis Patterns

    Top N analysis
    Growth calculations
    Customer/Product analysis
    Segmentation
Remember to:

    Always start with clear requirements
    Use appropriate indexing for large datasets
    Consider query performance
    Document your analysis queries
    Use CTEs for complex queries instead of nested subqueries
    Always validate your results



MySQL Interview Questions - Most Commonly Asked
===============================================

🔰 Basic MySQL Interview Questions
----------------------------------
1. What is MySQL?
   - MySQL is an open-source relational database management system based on SQL.

2. What is the difference between SQL and MySQL?
   - SQL is a query language; MySQL is a database system that uses SQL.

3. What are the types of SQL commands?
   - DDL (CREATE, DROP), DML (INSERT, UPDATE), DCL (GRANT), TCL (COMMIT), DQL (SELECT)

4. What is a Primary Key?
   - A unique identifier for a row that cannot be NULL.

5. What is a Foreign Key?
   - A key used to link two tables.

6. What is a Unique Key?
   - Ensures all values in a column are distinct (can include NULLs).

7. Difference between WHERE and HAVING?
   - WHERE filters rows before grouping; HAVING filters after grouping.

🔄 Joins & Relationships
------------------------
8. Types of joins in MySQL:
   - INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL OUTER JOIN, CROSS JOIN, SELF JOIN

9. Difference between INNER JOIN and LEFT JOIN?

10. How to implement many-to-many relationships?
    - Using a junction table with foreign keys.

11. What is a Self Join?
    - A table joined to itself.

⚙️ Indexes, Views, Constraints
------------------------------
12. What is an Index?
    - Improves query performance by indexing columns.

13. Clustered vs Non-Clustered Index?
    - MySQL’s InnoDB uses clustered index by default (PRIMARY KEY).

14. What is a View?
    - A virtual table created from a SELECT query.

15. What are Constraints?
    - PRIMARY KEY, FOREIGN KEY, UNIQUE, NOT NULL, CHECK, DEFAULT.

📊 Advanced Concepts
--------------------
16. What is Normalization?
    - Organizing data to reduce redundancy.

17. What is Denormalization?
    - Combining tables for performance at the cost of redundancy.

18. Difference between TRUNCATE and DELETE?
    - DELETE is DML (can filter); TRUNCATE is DDL (faster, removes all rows).

19. Difference between UNION and UNION ALL?
    - UNION removes duplicates; UNION ALL keeps all rows.

20. What are Stored Procedures and Triggers?
    - Stored Procedure: A stored SQL block.
    - Trigger: Auto-executed SQL on table events.

21. What are Transactions?
    - A sequence of SQL statements treated as a unit. (BEGIN, COMMIT, ROLLBACK)

22. What is ACID?
    - Atomicity, Consistency, Isolation, Durability — properties of reliable transactions.

🧪 Practical Scenarios
-----------------------
1. Query to fetch second-highest salary.
2. Find duplicate records in a table.
3. Customers who did not place any orders.
4. Top 3 highest selling products.
5. Total revenue per customer.


==============================================================================================================
==============================================================================================================


-- 1. Basic SELECT Queries (Most Important for Data Analysts)
-- Syntax for basic data retrieval
SELECT column1, column2 -- specific columns
FROM table_name
WHERE condition
GROUP BY column_name
HAVING group_condition
ORDER BY column_name [ASC|DESC]
LIMIT n;

-- Example:
SELECT category, COUNT(*) as count, AVG(price) as avg_price
FROM products
WHERE price > 100
GROUP BY category
HAVING count > 10
ORDER BY avg_price DESC
LIMIT 5;

-- 2. JOINS (Essential for Data Analysis)
-- Inner Join
SELECT o.order_id, c.customer_name
FROM orders o
INNER JOIN customers c ON o.customer_id = c.customer_id;

-- Left Join
SELECT c.customer_name, o.order_id
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id;

-- 3. Aggregate Functions
SELECT 
    COUNT(*) as total_count,
    SUM(amount) as total_amount,
    AVG(amount) as average_amount,
    MAX(amount) as highest_amount,
    MIN(amount) as lowest_amount
FROM sales;

-- 4. Date Functions (Important for Time Series Analysis)
SELECT 
    DATE(timestamp_column) as date,
    YEAR(date_column) as year,
    MONTH(date_column) as month,
    DAY(date_column) as day
FROM table_name;

-- 5. Common Table Expressions (CTEs for Complex Analysis)
WITH monthly_sales AS (
    SELECT 
        DATE_FORMAT(sale_date, '%Y-%m') as month,
        SUM(amount) as total_sales
    FROM sales
    GROUP BY month
)
SELECT * FROM monthly_sales;

-- 6. Window Functions (Advanced Analysis)
SELECT 
    product_name,
    category,
    price,
    AVG(price) OVER (PARTITION BY category) as avg_category_price,
    RANK() OVER (ORDER BY price DESC) as price_rank
FROM products;

-- 7. Subqueries (For Complex Conditions)
SELECT product_name, price
FROM products
WHERE price > (SELECT AVG(price) FROM products);

-- 8. CASE Statements (For Data Categorization)
SELECT 
    order_id,
    amount,
    CASE 
        WHEN amount < 100 THEN 'Small'
        WHEN amount < 1000 THEN 'Medium'
        ELSE 'Large'
    END as order_size
FROM orders;

-- 9. String Functions
SELECT 
    CONCAT(first_name, ' ', last_name) as full_name,
    UPPER(email) as email_upper,
    LENGTH(phone) as phone_length
FROM customers;

-- 10. Common Analysis Queries

-- Finding Top N
SELECT product_name, SUM(quantity) as total_sold
FROM sales
GROUP BY product_name
ORDER BY total_sold DESC
LIMIT 10;

-- Year-over-Year Growth
SELECT 
    YEAR(sale_date) as year,
    SUM(amount) as total_sales,
    (SUM(amount) - LAG(SUM(amount)) OVER (ORDER BY YEAR(sale_date))) / 
     LAG(SUM(amount)) OVER (ORDER BY YEAR(sale_date)) * 100 as yoy_growth
FROM sales
GROUP BY year;

-- Customer Segmentation
SELECT 
    customer_id,
    COUNT(*) as total_orders,
    SUM(amount) as total_spent,
    AVG(amount) as avg_order_value
FROM orders
GROUP BY customer_id;
